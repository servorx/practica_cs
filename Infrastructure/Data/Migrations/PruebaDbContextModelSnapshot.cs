// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(PruebaDbContext))]
    partial class PruebaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Audience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("audiences", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AudienceBenefit", b =>
                {
                    b.Property<int>("AudienceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("audience_id");

                    b.Property<int>("BenefitId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("benefit_id");

                    b.HasKey("AudienceId", "BenefitId");

                    b.HasIndex("BenefitId");

                    b.ToTable("audience_benefits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT")
                        .HasColumnName("detail");

                    b.HasKey("Id");

                    b.ToTable("benefits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("category_polls", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CityOrMunicipality", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("StateRegId")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("state_reg_id");

                    b.HasKey("Code");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StateRegId");

                    b.ToTable("city_or_municipalities", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("id");

                    b.Property<int?>("AudienceId")
                        .HasColumnType("INT")
                        .HasColumnName("audience_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INT")
                        .HasColumnName("category_id");

                    b.Property<string>("Cellphone")
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("cellphone");

                    b.Property<string>("CityId")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("city_id");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<int?>("TypeId")
                        .HasColumnType("SERIAL");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Cellphone")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyProduct", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("company_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("INT")
                        .HasColumnName("product_id");

                    b.Property<double?>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int?>("UnitMeasureId")
                        .HasColumnType("INT")
                        .HasColumnName("unit_measure_id");

                    b.HasKey("CompanyId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("company_products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<string>("Isocode")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("isocode");

                    b.Property<string>("AlsaIsoThree")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("alsa_iso_three");

                    b.Property<string>("AlsaIsoTwo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("alsa_iso_two");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Isocode");

                    b.HasIndex("AlsaIsoThree")
                        .IsUnique();

                    b.HasIndex("AlsaIsoTwo")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(120)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("address");

                    b.Property<int?>("AudienceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("audience_id");

                    b.Property<string>("Cellphone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("cellphone");

                    b.Property<string>("CityId")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("city_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("Cellphone")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetailFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FavoriteId")
                        .HasColumnType("INT")
                        .HasColumnName("favorite_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("INT")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("ProductId");

                    b.ToTable("details_favorites", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyId")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("company_id");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("iNTEGER")
                        .HasColumnName("customer_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("favorites", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("memberships", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MembershipBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BenefitId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("benefit_id");

                    b.Property<int>("MembershipPeriId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("membership_period_id");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId")
                        .IsUnique();

                    b.HasIndex("MembershipPeriId")
                        .IsUnique();

                    b.ToTable("membership_benefits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MembershipPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyId")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("INT")
                        .HasColumnName("membership_id");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("INT")
                        .HasColumnName("period_id");

                    b.Property<double?>("Price")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PeriodId");

                    b.ToTable("membership_periods", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("periods", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryPollId")
                        .HasColumnType("INT")
                        .HasColumnName("categorypoll_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryPollId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("polls", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT")
                        .HasColumnName("city_id");

                    b.Property<string>("Image")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("price");

                    b.Property<int?>("TypeProductId")
                        .HasColumnType("INT")
                        .HasColumnName("typeproduct_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeProductId")
                        .IsUnique();

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QualityProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INT")
                        .HasColumnName("product_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INT")
                        .HasColumnName("customer_id");

                    b.Property<int>("PollId")
                        .HasColumnType("INT")
                        .HasColumnName("poll_id");

                    b.Property<string>("CompanyId")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("DateRating")
                        .HasColumnType("DATETIME")
                        .HasColumnName("daterating");

                    b.Property<double?>("Rating")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("rating");

                    b.HasKey("ProductId", "CustomerId", "PollId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PollId");

                    b.ToTable("quality_products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rate", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INT")
                        .HasColumnName("customer_id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("VARCHAR")
                        .HasColumnName("company_id");

                    b.Property<int>("PollId")
                        .HasColumnType("INT")
                        .HasColumnName("poll_id");

                    b.Property<DateTime?>("DateRating")
                        .HasColumnType("DATETIME")
                        .HasColumnName("daterating");

                    b.Property<double?>("Rating")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("rating");

                    b.HasKey("CustomerId", "CompanyId", "PollId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PollId");

                    b.ToTable("rates", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StateOrRegion", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("code");

                    b.Property<string>("Code3166")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("code_3166");

                    b.Property<string>("CountryId")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<int?>("SubdivisionCategoryId")
                        .HasColumnType("INT")
                        .HasColumnName("subdivision_category_id");

                    b.HasKey("Code");

                    b.HasIndex("Code3166")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SubdivisionCategoryId");

                    b.ToTable("states_or_regions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SubdivisionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("subdivision_categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TypeIdentification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SERIAL")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<string>("Sufix")
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("sufix");

                    b.HasKey("Id");

                    b.ToTable("type_identification", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TypeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("types_products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("unit_of_measure", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AudienceBenefit", b =>
                {
                    b.HasOne("Domain.Entities.Audience", "Audience")
                        .WithMany("AudienceBenefits")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Benefit", "Benefit")
                        .WithMany("AudienceBenefits")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Benefit");
                });

            modelBuilder.Entity("Domain.Entities.CityOrMunicipality", b =>
                {
                    b.HasOne("Domain.Entities.StateOrRegion", "StateOrRegion")
                        .WithMany("CitiesOrMunicipalities")
                        .HasForeignKey("StateRegId");

                    b.Navigation("StateOrRegion");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.Audience", "Audience")
                        .WithMany("Companies")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.CityOrMunicipality", "CityOrMunicipality")
                        .WithMany("Companies")
                        .HasForeignKey("CityId");

                    b.HasOne("Domain.Entities.TypeIdentification", "TypeIdentification")
                        .WithMany("Companies")
                        .HasForeignKey("TypeId");

                    b.Navigation("Audience");

                    b.Navigation("Category");

                    b.Navigation("CityOrMunicipality");

                    b.Navigation("TypeIdentification");
                });

            modelBuilder.Entity("Domain.Entities.CompanyProduct", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("CompanyProducts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("CompanyProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("CompanyProducts")
                        .HasForeignKey("UnitMeasureId");

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Audience", "Audience")
                        .WithMany("Customers")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.CityOrMunicipality", "CityOrMunicipality")
                        .WithMany("Customers")
                        .HasForeignKey("CityId");

                    b.Navigation("Audience");

                    b.Navigation("CityOrMunicipality");
                });

            modelBuilder.Entity("Domain.Entities.DetailFavorite", b =>
                {
                    b.HasOne("Domain.Entities.Favorite", "Favorite")
                        .WithMany("DetailsFavorites")
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("DetailsFavorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Favorite", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Favorites")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.MembershipBenefit", b =>
                {
                    b.HasOne("Domain.Entities.Benefit", "Benefit")
                        .WithMany("MembershipBenefits")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MembershipPeriod", "MembershipPeriod")
                        .WithMany("MembershipBenefits")
                        .HasForeignKey("MembershipPeriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benefit");

                    b.Navigation("MembershipPeriod");
                });

            modelBuilder.Entity("Domain.Entities.MembershipPeriod", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("MembershipPeriods")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.Membership", "Membership")
                        .WithMany("MembershipPeriods")
                        .HasForeignKey("MembershipId");

                    b.HasOne("Domain.Entities.Period", "Period")
                        .WithMany("MembershipPeriods")
                        .HasForeignKey("PeriodId");

                    b.Navigation("Company");

                    b.Navigation("Membership");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Domain.Entities.Poll", b =>
                {
                    b.HasOne("Domain.Entities.CategoryPoll", "CategoryPoll")
                        .WithMany("Polls")
                        .HasForeignKey("CategoryPollId");

                    b.Navigation("CategoryPoll");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.TypeProduct", "TypeProduct")
                        .WithOne("Product")
                        .HasForeignKey("Domain.Entities.Product", "TypeProductId");

                    b.Navigation("TypeProduct");
                });

            modelBuilder.Entity("Domain.Entities.QualityProduct", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("QualityProducts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("QualityProducts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Poll", "Poll")
                        .WithMany("QualityProducts")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("QualityProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Poll");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Rate", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Rates")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Rates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Poll", "Poll")
                        .WithMany("Rates")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Domain.Entities.StateOrRegion", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("StateOrRegions")
                        .HasForeignKey("CountryId");

                    b.HasOne("Domain.Entities.SubdivisionCategory", "SubdivisionCategory")
                        .WithMany("StateOrRegions")
                        .HasForeignKey("SubdivisionCategoryId");

                    b.Navigation("Country");

                    b.Navigation("SubdivisionCategory");
                });

            modelBuilder.Entity("Domain.Entities.Audience", b =>
                {
                    b.Navigation("AudienceBenefits");

                    b.Navigation("Companies");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Benefit", b =>
                {
                    b.Navigation("AudienceBenefits");

                    b.Navigation("MembershipBenefits");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Domain.Entities.CategoryPoll", b =>
                {
                    b.Navigation("Polls");
                });

            modelBuilder.Entity("Domain.Entities.CityOrMunicipality", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("CompanyProducts");

                    b.Navigation("Favorites");

                    b.Navigation("MembershipPeriods");

                    b.Navigation("QualityProducts");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("StateOrRegions");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("QualityProducts");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Domain.Entities.Favorite", b =>
                {
                    b.Navigation("DetailsFavorites");
                });

            modelBuilder.Entity("Domain.Entities.Membership", b =>
                {
                    b.Navigation("MembershipPeriods");
                });

            modelBuilder.Entity("Domain.Entities.MembershipPeriod", b =>
                {
                    b.Navigation("MembershipBenefits");
                });

            modelBuilder.Entity("Domain.Entities.Period", b =>
                {
                    b.Navigation("MembershipPeriods");
                });

            modelBuilder.Entity("Domain.Entities.Poll", b =>
                {
                    b.Navigation("QualityProducts");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("CompanyProducts");

                    b.Navigation("DetailsFavorites");

                    b.Navigation("QualityProducts");
                });

            modelBuilder.Entity("Domain.Entities.StateOrRegion", b =>
                {
                    b.Navigation("CitiesOrMunicipalities");
                });

            modelBuilder.Entity("Domain.Entities.SubdivisionCategory", b =>
                {
                    b.Navigation("StateOrRegions");
                });

            modelBuilder.Entity("Domain.Entities.TypeIdentification", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Domain.Entities.TypeProduct", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("CompanyProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
